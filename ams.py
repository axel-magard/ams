#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.7.2 on Fri Jan 06 11:35:51 2017
#

import wx
import wx.grid
import wx.propgrid

import wx.html2 as webview
import wx.propgrid as wxpg
import wx.lib.agw.customtreectrl as CT
import wx.grid as gridlib
import os
import sys
import pickle
from configparser import ConfigParser
from datetime import datetime
from optparse import OptionParser, SUPPRESS_HELP
from amsModel import importModelLegacy, checkModel, storeAttr, CSSStyle, Model, Workcenter, ProdType, Operation, Transition, cloneArtefact, genUniqueName
from amsCompute import initialComputations, ConvertAR, ComputeWorkloadTable, ComputeCapTable, CompTabOverall, CompGraphics, ComputeCostAll, ComputeResource, CostIndices, Resources
from amsView import RenderWorkLoadTable, RenderCapTable, RenderTabOverall, RenderGraphics, unitOfTime, xValues, xValueAttributes, formatValue, guiTree
from amsData import getDataDictItems, getLabel, getPlotsAvailable
from amsCfg import getOutputItems, getOutputItemByName, cfgGet, getCharts
from GridStdEdRend import EditorsAndRenderersGrid

version = "1.0"
SLASH = os.sep
models = []
model = None
modelSelected = -1
options = None
HOME = os.getcwd()

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

# Menu item ids
miOpen = 1
miOpenURL = 2
miExit = 3
miPref = 4
miSave = 5
miSaveAs= 6
miImportLegacy = 7
miNew = 8
miHelp = 9

# Configuration
cfg = {}
dpi = 96.0
winSize = ()

def getValue(value):
    try:
        v = float(value)
    except ValueError:
        try:
            v = int(value)
        except ValueError:
            v = value
    return v




class ArtefactsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ArtefactsDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER | wx.SYSTEM_MENU
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((640, 480))
        self.window_2 = EditorsAndRenderersGrid(self, wx.ID_ANY)
        self.msg = wx.StaticText(self, wx.ID_ANY, "")
        self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
        self.button_CANCEL = wx.Button(self, wx.ID_ANY, "Cancel")
        self.button_ADD = wx.Button(self, wx.ID_ANY, "Add")
        self.button_CLONE = wx.Button(self, wx.ID_ANY, "Clone")
        self.button_REMOVE = wx.Button(self, wx.ID_ANY, "Delete")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onOK, self.button_OK)
        self.Bind(wx.EVT_BUTTON, self.onCANCEL, self.button_CANCEL)
        self.Bind(wx.EVT_BUTTON, self.onAdd, self.button_ADD)
        self.Bind(wx.EVT_BUTTON, self.onClone, self.button_CLONE)
        self.Bind(wx.EVT_BUTTON, self.onRemove, self.button_REMOVE)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ArtefactsDialog.__set_properties
        self.SetTitle("dialog_3")
        self.SetSize((640, 480))
        self.button_OK.Enable(False)
        # end wxGlade
        self.window_2.button_OK = self.button_OK
        self.window_2.button_CANCEL = self.button_CANCEL
        self.window_2.button_ADD = self.button_ADD
        self.window_2.button_REMOVE = self.button_REMOVE
        self.what = ""
        self.artefact = None
        self.row = -1
        self.pt = None  # Product Type for opearion selected

    def __do_layout(self):
        # begin wxGlade: ArtefactsDialog.__do_layout
        sizer_25 = wx.BoxSizer(wx.VERTICAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25.Add(self.window_2, 1, wx.EXPAND, 0)
        sizer_25.Add(self.msg, 0, 0, 0)
        sizer_26.Add(self.button_OK, 0, 0, 0)
        sizer_26.Add(self.button_CANCEL, 0, 0, 0)
        sizer_26.Add(self.button_ADD, 0, 0, 0)
        sizer_26.Add(self.button_CLONE, 0, 0, 0)
        sizer_26.Add(self.button_REMOVE, 0, 0, 0)
        sizer_25.Add(sizer_26, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_25)
        self.Layout()
        # end wxGlade

    def init(self, model, what, pt=None):
        self.model = model
        self.what = what
        if pt:
            self.pt = self.model.findProdType(pt.name)
        if (what == "Product Type" and len(model.prodtypes) == 0 ) or \
            (what == "Workcenter" and len(model.workcenter) == 0 ) or \
            (what == "Operation" and len(pt.operations) == 0 ):
            self.button_CLONE.Disable()
    def onOK(self, event):  # wxGlade: ArtefactsDialog.<event_handler>
        global model, models
        p = self.GetParent().panel_1.tree_ctrl_1
        if self.what == "Workcenter": 
            msg = model.checkWorkcenterTable(self.window_2.table)
            if msg:
                self.msg.SetLabelText(msg)
                self.button_OK.Disable()
                return
            newWC = self.model.loadWorkcenterTable(self.window_2.table)
            for w in newWC:
                log.append(f"Workcenter {w.name} added.")    
        elif self.what == "Product Type":                
            newPT = self.model.loadProductTypeTable(self.window_2.table)
            if len(self.model.prodtypes) == 1:
                self.model.prodtypes[0].percentage = 1.0               
            for pt in newPT:
                self.GetParent().showProductTypes(pt)
                log.append(f"Product Type {pt.name} added.")
        elif self.what == "Operation":                
            newOp = self.pt.loadOperationTable(self.window_2.table)
            for o in newOp:
                log.append(f"Operation {o.name} added for product type {self.pt.name}.")
        self.GetParent().removeModel(model)
        model = self.model.clone()        
        models[modelSelected] = model
        if self.pt:
            self.GetParent().prodType = model.findProdType(self.pt.name) 
        self.GetParent().showModel(model)
        model.bComputed = False
        model.findUsedWorkcenter()
        model.change(True,self.GetParent().tree.get(id(model),"treeCtrl"),self.GetParent().tree.get(id(model),"treeItem"))
        self.GetParent().OnRefresh(None,bRefresh=True)
        self.Close()
        event.Skip()
    def onCANCEL(self, event):  # wxGlade: ArtefactsDialog.<event_handler>
        self.Close()
        event.Skip()
    def onAdd(self, event):  # wxGlade: ArtefactsDialog.<event_handler>
        self.row = self.window_2.GetGridCursorRow()
        if self.what == "Workcenter":
            if not self.artefact:
                self.artefact = Workcenter("New Workcenter")
                self.artefact.name = genUniqueName(self.model.workcenter,self.artefact.name)            
            w = self.model.findWorkcenter(self.window_2.table["Name"][self.row])
            self.model.addWorkcenter(w,self.artefact)
            self.window_2.AppendRows()
            self.window_2.table = self.model.makeWorkcenterTable()
        elif self.what == "Product Type":            
            if not self.artefact:
                self.artefact = ProdType("New Product Type","Parts started","Parts finished", "New Product Type", self.model)
                self.artefact.name = genUniqueName(self.model.prodtypes,self.artefact.name)            
            if len(model.prodtypes) == 0:
                self.artefact.percentage = 1.0
            if len(self.artefact.operations) == 0:
                self.artefact.operations.append(Operation("New Operation",self.model))
            t = self.model.findProdType(self.window_2.table["Name"][self.row])
            t.percentage /= 2.0
            self.artefact.percentage = t.percentage
            self.model.addProdType(t,self.artefact)
            self.window_2.AppendRows()
            self.window_2.table = self.model.makeProductTypeTable()            
        elif self.what == "Operation":            
            if not self.artefact:
                self.artefact = Operation("New Operation",model)
                self.artefact.name = genUniqueName(self.pt.operations,self.artefact.name)
            o = self.pt.findOperation(self.window_2.table["Name"][self.row])
            self.pt.addOperation(o,self.artefact)
            self.window_2.AppendRows()
            self.window_2.table = self.pt.makeOperationTable()            
        self.row += 1
        self.window_2.GoToCell(self.row,0)
        self.window_2.SelectRow(self.row)
        self.artefact = None
        self.loadArtefacts()
        self.button_CLONE.Enable()
        self.button_OK.Enable()  
        event.Skip()
    def onRemove(self, event):  # wxGlade: ArtefactsDialog.<event_handler>
        row = self.window_2.GetGridCursorRow()
        p = self.GetParent().panel_1.tree_ctrl_1
        if self.what == "Workcenter":        
            wc = self.model.findWorkcenter(self.window_2.GetCellValue(row,0))
            p.OnDeleteWc(wc,self.GetParent(),self.model)            
        elif self.what == "Product Type":    
            prev_pt = None
            if row > 0:
                prev_pt = self.model.findProdType(self.window_2.GetCellValue(row-1,0)) 
            pt = self.model.findProdType(self.window_2.GetCellValue(row,0))
            if prev_pt:
                prev_pt.percentage += pt.percentage
            self.model.deleteProdType(pt)
            self.window_2.table = self.model.makeProductTypeTable()            
        elif self.what == "Operation":    
            op = self.pt.findOperation(self.window_2.GetCellValue(row,0))                                         
            self.pt.deleteOperation(op)
        self.loadArtefacts()
        self.window_2.DeleteRows(row)
        self.button_OK.Enable()     
        event.Skip()
    def onClone(self, event):  # wxGlade: ArtefactsDialog.<event_handler>
        row = self.window_2.GetGridCursorRow()
        if self.what == "Workcenter":        
            wc = self.model.findWorkcenter(self.window_2.GetCellValue(row,0))
            self.artefact = cloneArtefact(wc,self.model.workcenter)
        elif self.what == "Product Type":    
            pt = model.findProdType(self.window_2.GetCellValue(row,0))     
            self.artefact = cloneArtefact(pt,self.model.prodtypes)
        elif self.what == "Operation":    
            op = self.pt.findOperation(self.window_2.GetCellValue(row,0))                   
            self.artefact = cloneArtefact(op,self.pt.operations)
        self.onAdd(event)  
        self.button_OK.Enable()     
        event.Skip()
# end of class ArtefactsDialog
    def loadArtefacts(self):
        for c, k in enumerate(self.window_2.table):
            self.window_2.SetColLabelValue(c,k)            
            for i, w in enumerate(self.window_2.table["Name"]):        
                v, renderer = formatValue(self.window_2.table[k][i],k,self.model)
                if renderer:
                    self.window_2.SetCellRenderer(i, c, renderer[0])
                    self.window_2.SetCellEditor(i, c, renderer[1])
                self.window_2.SetCellValue(i, c, v)
        self.window_2.AutoSizeColumns(True)
        self.window_2.AutoSizeRows(True)

class OpAssignDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OpAssignDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((360, 480))
        self.combo_box_pt = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.list_box_op = wx.ListBox(self, wx.ID_ANY, choices=["choice 1"])
        self.list_box_wc = wx.ListBox(self, wx.ID_ANY, choices=["choice 1"])
        self.msg = wx.StaticText(self, wx.ID_ANY, "")
        self.button_OK = wx.Button(self, wx.ID_OK, "OK")
        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_COMBOBOX, self.prodTypeSelected, self.combo_box_pt)
        self.Bind(wx.EVT_LISTBOX, self.opSelected, self.list_box_op)
        self.Bind(wx.EVT_LISTBOX, self.wcSelected, self.list_box_wc)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: OpAssignDialog.__set_properties
        self.SetTitle("Operation Assign ...")
        self.SetSize((360, 480))
        self.button_OK.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: OpAssignDialog.__do_layout
        sizer_21 = wx.BoxSizer(wx.VERTICAL)
        sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Operations assigned to Workcenter"), wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.VERTICAL)
        sizer_24.Add(self.combo_box_pt, 0, wx.EXPAND, 0)
        sizer_24.Add(self.list_box_op, 1, wx.EXPAND, 0)
        sizer_23.Add(sizer_24, 1, wx.ALL | wx.EXPAND, 5)
        sizer_23.Add(self.list_box_wc, 1, wx.ALL | wx.EXPAND, 5)
        sizer_21.Add(sizer_23, 1, wx.ALL | wx.EXPAND, 0)
        sizer_21.Add(self.msg, 0, wx.EXPAND, 0)
        sizer_22.Add(self.button_OK, 0, 0, 0)
        sizer_22.Add(self.button_CANCEL, 0, 0, 0)
        sizer_21.Add(sizer_22, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_21)
        self.Layout()
        # end wxGlade

    def prodTypeSelected(self, event):  # wxGlade: OpAssignDialog.<event_handler>
        self.prodtype = self.model.prodtypes[self.combo_box_pt.GetSelection()]
        self.list_box_op.Clear()
        for i, o in enumerate(self.prodtype.operations):
            self.list_box_op.Append(o.name)
        if event:    
            event.Skip()

    def opSelected(self, event):  # wxGlade: OpAssignDialog.<event_handler>
        self.operation = self.prodtype.operations[self.list_box_op.GetSelection()]
        self.list_box_wc.Select(self.operation.WCNumber-1)
        if event:
            event.Skip()

    def wcSelected(self, event):  # wxGlade: OpAssignDialog.<event_handler>
        i = self.list_box_wc.GetSelection()
        self.changes.append({"operation": self.operation, "oldWorkcenter": self.operation.WCNumber, "newWorkcenter": i+1 })
        self.operation.WCNumber = i + 1
        self.msg.SetLabel(f"Operation {self.operation.name} assigned to workcenter {self.model.workcenter[i].name}.")
        self.button_OK.Enable()
        event.Skip()   

# end of class OpAssignDialog
class CapDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CapDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((360, 240))
        self.grid_2 = wx.grid.Grid(self, wx.ID_ANY, size=(1, 1))
        self.button_OK = wx.Button(self, wx.ID_OK, "OK")
        self.button_Cancel = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CapDialog.__set_properties
        self.SetTitle("Capacity Calculation")
        self.SetSize((360, 240))
        self.grid_2.CreateGrid(10, 2)
        self.grid_2.SetColLabelValue(0, "Product Type")
        self.grid_2.SetColLabelValue(1, "Weekly Demand")
        self.grid_2.SetColSize(1, 120)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CapDialog.__do_layout
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19.Add(self.grid_2, 1, wx.EXPAND, 0)
        sizer_20.Add(self.button_OK, 0, 0, 0)
        sizer_20.Add(self.button_Cancel, 0, 0, 0)
        sizer_19.Add(sizer_20, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_19)
        self.Layout()
        # end wxGlade

# end of class CapDialog
class PlotPropertiesDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PlotPropertiesDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((800, 400))
        self.list_box_x = wx.ListBox(self, wx.ID_ANY, choices=["choice 1"])
        self.list_box_y = wx.ListBox(self, wx.ID_ANY, choices=["choice 1"])
        self.list_box_y2 = wx.ListBox(self, wx.ID_ANY, choices=["choice 1"])
        self.check_list_box_1 = wx.CheckListBox(self, wx.ID_ANY, choices=[])
        self.button_3 = wx.Button(self, wx.ID_ANY, "Clear")
        self.button_4 = wx.Button(self, wx.ID_ANY, "All")
        self.button_1 = wx.Button(self, wx.ID_OK, "OK")
        self.button_2 = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKLISTBOX, self.doWorkcenterSelected, self.check_list_box_1)
        self.Bind(wx.EVT_BUTTON, self.onClearWC, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.onAllWC, self.button_4)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PlotPropertiesDialog.__set_properties
        self.SetTitle("Plot Properties")
        self.SetSize((800, 400))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PlotPropertiesDialog.__do_layout
        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        label_11 = wx.StaticText(self, wx.ID_ANY, "X Axis")
        sizer_15.Add(label_11, 0, 0, 0)
        sizer_15.Add(self.list_box_x, 1, wx.EXPAND, 0)
        sizer_14.Add(sizer_15, 1, wx.EXPAND, 0)
        label_12 = wx.StaticText(self, wx.ID_ANY, "Y Axis")
        sizer_16.Add(label_12, 0, 0, 0)
        sizer_16.Add(self.list_box_y, 1, wx.EXPAND, 0)
        sizer_14.Add(sizer_16, 1, wx.EXPAND, 0)
        label_13 = wx.StaticText(self, wx.ID_ANY, "2nd Y Axis")
        sizer_17.Add(label_13, 0, 0, 0)
        sizer_17.Add(self.list_box_y2, 1, wx.EXPAND, 0)
        sizer_14.Add(sizer_17, 1, wx.EXPAND, 0)
        label_14 = wx.StaticText(self, wx.ID_ANY, "Workcenter")
        sizer_18.Add(label_14, 0, 0, 0)
        sizer_18.Add(self.check_list_box_1, 1, wx.EXPAND, 0)
        sizer_12.Add(self.button_3, 0, 0, 0)
        sizer_12.Add(self.button_4, 0, 0, 0)
        sizer_18.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_14.Add(sizer_18, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_14, 1, wx.EXPAND, 0)
        sizer_13.Add(self.button_1, 0, 0, 0)
        sizer_13.Add(self.button_2, 0, 0, 0)
        sizer_11.Add(sizer_13, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_11)
        self.Layout()
        # end wxGlade

    def doWorkcenterSelected(self, event):  # wxGlade: PlotPropertiesDialog.<event_handler>
        l = self.check_list_box_1.GetCheckedItems()     
        if len(l) == 0:
            self.button_1.Disable()
        else:
            self.button_1.Enable()
            if len(l) > 1:
                self.list_box_y2.SetSelection(0)
                self.list_box_y2.Disable()
            else:    
                self.list_box_y2.Enable()
        if event:    
            event.Skip()
    def onClearWC(self, event):  # wxGlade: PlotPropertiesDialog.<event_handler>
        self.check_list_box_1.SetCheckedItems([])
        event.Skip()
    def onAllWC(self, event):  # wxGlade: PlotPropertiesDialog.<event_handler>
        self.check_list_box_1.SetCheckedItems(range(self.cnt))
        event.Skip()

# end of class PlotPropertiesDialog
class PfDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PfDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((799, 357))
        self.list_box_1 = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.grid_1 = wx.grid.Grid(self, wx.ID_ANY, size=(1, 1))
        self.button_add = wx.Button(self, wx.ID_ANY, "Add")
        self.combo_box_1 = wx.ComboBox(self, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.button_remove = wx.Button(self, wx.ID_ANY, "Remove")
        self.statusbox = wx.StaticText(self, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.evtListBox, self.list_box_1)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_CHANGED, self.OnCellChanged, self.grid_1)
        self.Bind(wx.EVT_BUTTON, self.OnSuccAdd, self.button_add)
        self.Bind(wx.EVT_COMBOBOX, self.onSuccSelected, self.combo_box_1)
        self.Bind(wx.EVT_BUTTON, self.OnSuccRemove, self.button_remove)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PfDialog.__set_properties
        self.SetTitle("dialog")
        self.SetSize((799, 357))
        self.grid_1.CreateGrid(10, 5)
        self.grid_1.SetColLabelValue(0, "Operation")
        self.grid_1.SetColLabelValue(1, "Probability")
        self.grid_1.SetColLabelValue(2, "Operation Time")
        self.grid_1.SetColSize(2, 109)
        self.grid_1.SetColLabelValue(3, "Transition Cost")
        self.grid_1.SetColSize(3, 126)
        self.grid_1.SetColLabelValue(4, "Transition Time")
        self.grid_1.SetColSize(4, 126)
        self.button_add.Enable(False)
        self.button_remove.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PfDialog.__do_layout
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        label_3 = wx.StaticText(self, wx.ID_ANY, "Operations")
        sizer_8.Add(label_3, 0, 0, 0)
        sizer_8.Add(self.list_box_1, 4, wx.EXPAND, 0)
        sizer_7.Add(sizer_8, 1, wx.EXPAND, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, "Successor")
        sizer_9.Add(label_4, 0, 0, 0)
        sizer_9.Add(self.grid_1, 3, wx.EXPAND, 0)
        sizer_10.Add(self.button_add, 0, 0, 0)
        sizer_10.Add(self.combo_box_1, 0, 0, 0)
        sizer_10.Add(self.button_remove, 0, 0, 0)
        sizer_9.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_9.Add(self.statusbox, 0, 0, 0)
        sizer_7.Add(sizer_9, 3, wx.EXPAND, 0)
        self.SetSizer(sizer_7)
        self.Layout()
        # end wxGlade

    def evtListBox(self, event):  # wxGlade: PfDialog.<event_handler>
        self.succ = self.prodType.getSucc(self.list_box_1.GetSelection()+1)
        self.updateSuccList()
        event.Skip()

    def updateSuccList(self):
        self.succ = self.prodType.getSucc(self.list_box_1.GetSelection()+1)
        self.grid_1.ClearGrid()
        for i in range(len(self.succ)):
            self.grid_1.SetCellValue(i,0,self.prodType.getOp(self.succ[i].to).name)
            self.grid_1.SetCellValue(i,1,"%f" % self.succ[i].Prob)
            self.grid_1.SetCellValue(i,2,"%f" % self.succ[i].OperatorTime)
            self.grid_1.SetCellValue(i,3,"%f" % self.succ[i].TransitionCost)
            self.grid_1.SetCellValue(i,4,"%f" % self.succ[i].TransitionTime)
            self.grid_1.SetReadOnly(i,0,True)
        self.button_remove.Enable()
        self.populateSuccList()


    def OnCellChanged(self, event):  # wxGlade: PfDialog.<event_handler>
        self.statusbox.SetLabel("")
        attr = ("name","Prob","OperatorTime","TransitionCost","TransitionTime")
        row = self.grid_1.GetGridCursorRow()
        col = self.grid_1.GetGridCursorCol()

        value = getValue(self.grid_1.GetCellValue(row, col))
        if self.isOKSuccProbSum():
            setattr(self.succ[row],attr[col],value)
            self.updateAllSuccProb()
        event.Skip()

    def isOKSuccProbSum(self):
        sum = 0
        for i in range(len(self.succ)):
            try:
                sum += float(self.grid_1.GetCellValue(i,1))
            except ValueError:
                self.grid_1.SetCellValue(i,1,"%f" % self.succ[i].Prob)    
        if sum > 1.0:
            self.statusbox.SetLabel("ERROR: Sum of probabilities can not exceed 1.0 !")
            return False
        return True

    def updateAllSuccProb(self):
        for i in range(len(self.succ)):
            setattr(self.succ[i],"Prob",getValue(self.grid_1.GetCellValue(i, 1)))
        model.bComputed = False
        p = self.GetParent().GetParent().GetParent().GetParent()
        model.change(True,p.tree.get(id(model),"treeCtrl"),p.tree.get(id(model),"treeItem"))
        p.OnRefresh(None,bRefresh=True)

    def populateSuccList(self):
        def alreadyIsSucc(o):
            try:
                name = o.name
            except AttributeError:
                name = o
            for s in self.succ:
                if s.getOPName(s.to) == name:
                    return True
            return False

        self.combo_box_1.Clear()
        for o in self.prodType.operations:
            if not alreadyIsSucc(o):
                self.combo_box_1.Append(o.name)
        if not alreadyIsSucc("SINK"):
            self.combo_box_1.Append("SINK")

    def OnSuccAdd(self, event):  # wxGlade: PfDialog.<event_handler>
        opName = self.combo_box_1.GetValue()
        self.button_add.Enable(False)
        self.prodType.addSucc(model,self.list_box_1.GetSelection()+1,self.prodType.getOpIdx(opName)+1,1.0,0.0,0.0,0.0)
        self.updateSuccList()
        model.bComputed = False
        self.GetParent().GetParent().GetParent().GetParent().OnRefresh(None,bRefresh=True)
        event.Skip()

    def OnSuccRemove(self, event):  # wxGlade: PfDialog.<event_handler>
        row = self.grid_1.GetGridCursorRow()
        opName = getValue(self.grid_1.GetCellValue(row, 0))
        self.prodType.delSucc(model,self.list_box_1.GetSelection()+1,self.prodType.getOpIdx(opName)+1)
        self.updateSuccList()
        model.bComputed = False
        self.GetParent().GetParent().GetParent().GetParent().OnRefresh(None,bRefresh=True)
        event.Skip()

    def onSuccSelected(self, event):  # wxGlade: PfDialog.<event_handler>
        self.button_add.Enable()
        event.Skip()

# end of class PfDialog
class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # Content of this block not found. Did you rename this class?
        pass

    def __set_properties(self):
        # Content of this block not found. Did you rename this class?
        pass

    def __do_layout(self):
        # Content of this block not found. Did you rename this class?
        pass

# end of class MyDialog
class wxWindow(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: wxWindow.__init__
        kwds["style"] = kwds.get("style", 0) | wx.BORDER_RAISED
        wx.Panel.__init__(self, *args, **kwds)
        self.tree_ctrl_1 = CustomTreeCtrl(self, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_TWIST_BUTTONS)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: wxWindow.__set_properties
        pass
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: wxWindow.__do_layout
        sizer_1_copy_copy_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_1_copy_copy_copy.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1_copy_copy_copy)
        sizer_1_copy_copy_copy.Fit(self)
        self.Layout()
        # end wxGlade

# end of class wxWindow
class ARDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ARDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((350, 250))
        self.list_box_ProdType = wx.ListBox(self, wx.ID_ANY, choices=["Overall"])
        self.radio_btn_AR = wx.RadioButton(self, wx.ID_ANY, "AR")
        self.radio_btn_DR = wx.RadioButton(self, wx.ID_ANY, "DR")
        self.radio_btn_SOB = wx.RadioButton(self, wx.ID_ANY, "SOB")
        self.radio_btn_SHIP = wx.RadioButton(self, wx.ID_ANY, "SHIP")
        self.radio_btn_WIP = wx.RadioButton(self, wx.ID_ANY, "WIP")
        self.label_2 = wx.StaticText(self, wx.ID_ANY, "Specify Overall Arrival Rate:")
        self.label_MaxText = wx.StaticText(self, wx.ID_ANY, "Max Overall Arrival Rate:")
        self.text_ctrl_DailyOut = wx.TextCtrl(self, wx.ID_ANY, "")
        self.label_Max = wx.StaticText(self, wx.ID_ANY, "0")
        self.msg = wx.StaticText(self, wx.ID_ANY, "")
        self.button_OK = wx.Button(self, wx.ID_OK, "OK")
        self.button_Cancel = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_RADIOBUTTON, self.HandleARSelected, self.radio_btn_AR)
        self.Bind(wx.EVT_RADIOBUTTON, self.HandleDRSelected, self.radio_btn_DR)
        self.Bind(wx.EVT_RADIOBUTTON, self.HandleSOBSelected, self.radio_btn_SOB)
        self.Bind(wx.EVT_RADIOBUTTON, self.HandleSHIPSelected, self.radio_btn_SHIP)
        self.Bind(wx.EVT_TEXT, self.HandleInputChanged, self.text_ctrl_DailyOut)
        # end wxGlade
        self.InpMode = "IMODE_AR"
        if model.OAR == 0.0:
            model.OAR = model.MaxOAR*0.9
        self.text_ctrl_DailyOut.SetValue("%.8f" % (model.OAR))
        self.HandleARSelected(None)

    def __set_properties(self):
        # begin wxGlade: ARDialog.__set_properties
        self.SetTitle("Work Load Computation")
        self.SetSize((350, 250))
        self.radio_btn_AR.SetValue(1)
        self.msg.SetForegroundColour(wx.Colour(204, 50, 50))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ARDialog.__do_layout
        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Select Prod Type and Daily Output"), wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 1, 1)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "Select Product Type:")
        sizer_3.Add(label_1, 0, 0, 0)
        sizer_3.Add(self.list_box_ProdType, 8, wx.EXPAND, 0)
        sizer_6.Add(self.radio_btn_AR, 0, 0, 0)
        sizer_6.Add(self.radio_btn_DR, 0, 0, 0)
        sizer_6.Add(self.radio_btn_SOB, 0, 0, 0)
        sizer_6.Add(self.radio_btn_SHIP, 0, 0, 0)
        sizer_6.Add(self.radio_btn_WIP, 0, 0, 0)
        sizer_3.Add(sizer_6, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_2, 0, 0, 0)
        grid_sizer_1.Add(self.label_MaxText, 0, 0, 0)
        grid_sizer_1.Add(self.text_ctrl_DailyOut, 0, 0, 0)
        grid_sizer_1.Add(self.label_Max, 0, 0, 0)
        sizer_3.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_3.Add(self.msg, 0, 0, 0)
        sizer_5.Add(self.button_OK, 0, 0, 0)
        sizer_5.Add(self.button_Cancel, 0, 0, 0)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

    def getInput(self,model,val):
        try:
            f = float(val)
        except ValueError:
            f = model.OAR
        return f    

    
    def HandleARSelected(self, event):  # wxGlade: ARDialog.<event_handler>
        newMode="IMODE_AR"
        self.label_Max.SetLabel("%.4f" % ConvertAR(model,model.MaxOAR,"IMODE_AR",newMode))
        self.label_MaxText.SetLabel("Max Overall Arrival Rate")
        self.label_2.SetLabel("Specify Arrival Rate")
        self.text_ctrl_DailyOut.SetValue("%.8f" % ConvertAR(model,self.getInput(model,self.text_ctrl_DailyOut.GetValue()),self.InpMode,newMode))
        self.InpMode = newMode
    def HandleDRSelected(self, event):  # wxGlade: ARDialog.<event_handler>
        newMode="IMODE_DR"
        self.label_Max.SetLabel("%.4f" % ConvertAR(model,model.MaxOAR,"IMODE_AR",newMode))
        self.label_MaxText.SetLabel("Max Overall Departure Rate")
        self.label_2.SetLabel("Specify Departure Rate")
        self.text_ctrl_DailyOut.SetValue("%.8f" % ConvertAR(model,self.getInput(model,self.text_ctrl_DailyOut.GetValue()),self.InpMode,newMode))
        self.InpMode = newMode
    def HandleSOBSelected(self, event):  # wxGlade: ARDialog.<event_handler>
        newMode="IMODE_SOB"
        self.label_Max.SetLabel("%d" % ConvertAR(model,model.MaxOAR,"IMODE_AR",newMode))
        self.label_MaxText.SetLabel("Max Overall Starts")
        self.label_2.SetLabel("Specify Daily Starts")
        self.text_ctrl_DailyOut.SetValue("%d" % round(ConvertAR(model,self.getInput(model,self.text_ctrl_DailyOut.GetValue()),self.InpMode,newMode)))
        self.InpMode = newMode
    def HandleSHIPSelected(self, event):  # wxGlade: ARDialog.<event_handler>
        newMode="IMODE_SHIP"
        self.label_Max.SetLabel("%d" % ConvertAR(model,model.MaxOAR,"IMODE_AR",newMode))
        self.label_MaxText.SetLabel("Max Overall Shipments")
        self.label_2.SetLabel("Specify Daily Shipments")
        self.text_ctrl_DailyOut.SetValue("%d" % round(ConvertAR(model,self.getInput(model,self.text_ctrl_DailyOut.GetValue()),self.InpMode,newMode)))
        self.InpMode = newMode
    def HandleWIPSelected(self, event):  # wxGlade: ARDialog.<event_handler>
        newMode="IMODE_WIP"
        self.label_Max.SetLabel("")
        self.label_MaxText.SetLabel("")
        self.label_2.SetLabel("Specify WIP")
        self.text_ctrl_DailyOut.SetValue("")
        # self.text_ctrl_DailyOut.SetValue("" )
        self.InpMode = newMode

    def HandleInputChanged(self, event):  # wxGlade: ARDialog.<event_handler>
        try:
            if self.InpMode != "IMODE_WIP" and float(self.text_ctrl_DailyOut.GetValue()) > float(self.label_Max.GetLabel()):
                self.button_OK.Disable()
            else:
                self.button_OK.Enable()
        except ValueError:
            self.button_OK.Disable()
# end of class ARDialog
class WLDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: WLDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((350, 250))
        self.list_box_ProdType = wx.ListBox(self, wx.ID_ANY, choices=[])
        self.text_ctrl_DailyOut = wx.TextCtrl(self, wx.ID_ANY, "")
        self.msg = wx.StaticText(self, wx.ID_ANY, "")
        self.button_OK = wx.Button(self, wx.ID_OK, "OK")
        self.button_Cancel = wx.Button(self, wx.ID_CANCEL, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX, self.ProdTypeSelected, self.list_box_ProdType)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: WLDialog.__set_properties
        self.SetTitle("Work Load Computation")
        self.SetSize((350, 250))
        self.msg.SetForegroundColour(wx.Colour(204, 50, 50))
        self.button_OK.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: WLDialog.__do_layout
        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Select Prod Type and Daily Output"), wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "Select Product Type:")
        sizer_3.Add(label_1, 0, 0, 0)
        sizer_3.Add(self.list_box_ProdType, 8, wx.EXPAND, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, "Specify Daily Output:")
        sizer_3.Add(label_2, 0, 0, 0)
        sizer_3.Add(self.text_ctrl_DailyOut, 0, 0, 0)
        sizer_3.Add(self.msg, 0, 0, 0)
        sizer_5.Add(self.button_OK, 0, 0, 0)
        sizer_5.Add(self.button_Cancel, 0, 0, 0)
        sizer_3.Add(sizer_5, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade
    def ProdTypeSelected(self, event):  # wxGlade: WLDialog.<event_handler>
        self.button_OK.Enable()
        event.Skip()
# end of class WLDialog


class Preferences:
    def __init__(self, *args, **kwds):
        self.filename = "ams.cfg"
    def save(self,cfg):
        config = ConfigParser()
        log.appendTimestamp()
        log.append("Saving cfg ...")
        for s in cfg.sections():
            config.add_section(s)
            for opt in cfg[s]:
                config.set(s, opt, cfg[s][opt].replace("%","%%"))
                log.append("[%s]: %s=%s]" % (s,opt,cfg[s][opt]))
        f = open(self.filename,"w")
        config.write(f)
        f.close()
    def load(self):
        config = ConfigParser()
        config.read_file(open(self.filename))
        for s in config.sections():
            log.append(s)
            for opt in config[s]:
                log.append("\t   "+opt+" = "+config[s][opt])
        return config

class AppLog:
    def __init__(self):
        self.log = []
        self.frame = None
    def setFrame(self, frame):
        self.frame = frame
    def append(self, msg, printIt=False):
        self.log.append(msg)
        if self.frame:
            self.frame.frame_1_statusbar.SetLabel(msg)
        if printIt:
            print(msg)
    def appendTimestamp(self, msg=""):
        m = str(datetime.now())[:-7] + " " + msg
        self.log.append(m)
        if self.frame:
            self.frame.frame_1_statusbar.SetLabel(m)
    def dump(self, filename="ams.log"):
        f = open(filename,"w")
        for l in self.log:
            f.write(l+"\n")
        f.close()

class PrefDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PrefDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((508, 553))
        self.property_grid_1 = wx.propgrid.PropertyGridManager(self, wx.ID_ANY)
        self.msg = wx.StaticText(self, wx.ID_ANY, "")
        self.button_OK = wx.Button(self, wx.ID_ANY, "OK")
        self.button_Cancel = wx.Button(self, wx.ID_ANY, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onOK, self.button_OK)
        self.Bind(wx.EVT_BUTTON, self.onCancel, self.button_Cancel)
        # end wxGlade
        self.property_grid_1.Bind( wxpg.EVT_PG_CHANGED, self.OnPropGridChange )
        self.pendingProperties = []

    def OnPropGridChange(self, event):
        global cfg
        p = event.GetProperty()
        self.button_OK.Enable(True)
        if p:
            self.pendingProperties.append(p)

    def __set_properties(self):
        # begin wxGlade: PrefDialog.__set_properties
        self.SetTitle("Preferences")
        self.SetSize((508, 553))
        self.button_OK.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PrefDialog.__do_layout
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.property_grid_1, 1, wx.EXPAND, 0)
        sizer_4.Add(self.msg, 0, 0, 0)
        sizer_27.Add(self.button_OK, 0, 0, 0)
        sizer_27.Add(self.button_Cancel, 0, 0, 0)
        sizer_4.Add(sizer_27, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        self.Layout()
        # end wxGlade
    def onOK(self, event):  # wxGlade: PrefDialog.<event_handler>
        for p in self.pendingProperties:
            cfg["computations"][p.GetName().lower()] = p.GetValueAsString()
        if self.GetParent().view == "Plot":
            hourglass = wx.BusyCursor()
            CompGraphics(model,NumValues=int(cfg["computations"]["GraphicValues"]))            
            self.GetParent().ApplyReport()
            del hourglass
        self.Close()                    
        event.Skip()
    def onCancel(self, event):  # wxGlade: PrefDialog.<event_handler>
        self.Close()                    
        event.Skip()
# end of class PrefDialog
# end of class wxWindow

class PrefModelDialog(PrefDialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((508, 354))
        self.property_grid_1 = wx.propgrid.PropertyGridManager(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()
        self.property_grid_1.Bind( wxpg.EVT_PG_CHANGED, self.OnPropGridChange )

    def OnPropGridChange(self, event):
        global cfg
        p = event.GetProperty()
        if p:
            m = self.GetParent().GetItemData(self.GetParent().item)["artefact"]
            if p.GetLabel() == "Unit of Time":
                dlg = wx.MessageDialog(self, "Do you want to convert all time values in model to new unit of time ?",
                        'Changing Unit Of Time ... ?',
                        wx.YES_NO | wx.NO_DEFAULT | wx.ICON_STOP
                        )
                rc = dlg.ShowModal()
                if rc == wx.ID_YES:
                    model.changeUnitOfTime(model.unitOfTime,unitOfTime.index(p.GetValueAsString()))
                dlg.Destroy()                
            storeAttr(m,p)
            self.GetParent().SetItemText(self.GetParent().item, m.name)
            self.GetParent().GetParent().GetParent().GetParent().SetTitle("AMS - %s" % model.name)
            log.append(f"Model {m.name}: '{p.GetLabel()}' changed to {p.GetValueAsString()}")
            self.GetParent().GetParent().GetParent().GetParent().OnRefresh(None,bRefresh=True)

    def __set_properties(self):
        self.SetTitle("Preferences")
        self.SetSize((508, 354))

    def __do_layout(self):
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.property_grid_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_4)
        self.Layout()

    def __set_properties(self):
        # Content of this block not found. Did you rename this class?
        pass

    def __do_layout(self):
        # Content of this block not found. Did you rename this class?
        pass

class PrefWCDialog(PrefDialog):
    def __init__(self, *args, **kwds):
        PrefDialog.__init__(self, *args, **kwds)
        self.pendingProperties = []
        self.logMsgs = []

    def OnPropGridChange(self, event, p=None):
        global cfg
        if not p:
            p = event.GetProperty()
        w = self.GetParent().GetItemData(self.GetParent().item)["artefact"]   
        self.msg.SetLabelText("")
        msg = storeAttr(w,p)
        if not msg:
            try:
                self.pendingProperties.remove(p)
            except ValueError: pass    
            self.logMsgs.append(f"Workcenter {w.name}: '{p.GetLabel()}' changed to {p.GetValueAsString()}")
            self.button_OK.Enable()
        else:
            self.pendingProperties.append(p)
            self.msg.SetLabelText(msg)
            self.button_OK.Disable()

    def onOK(self, event):  
        w = self.GetParent().GetItemData(self.GetParent().item)["artefact"]   
        for p in self.pendingProperties:
            self.OnPropGridChange(event, p)
        model.updateWorkcenter(w)
        self.GetParent().SetItemText(self.GetParent().item, w.name)
        for m in self.logMsgs:
            log.append(m)
        p = self.GetParent().GetParent().GetParent().GetParent()
        p.OnRefresh(None,bRefresh=True)
        model.change(True,p.tree.get(id(model),"treeCtrl"),p.tree.get(id(model),"treeItem"))
        self.Close()
    def onCancel(self, event):  
        self.Close()                    



class PrefOpDialog(PrefDialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        PrefDialog.__init__(self, *args, **kwds)
        self.pendingProperties = []
        self.logMsgs = []        

    def OnPropGridChange(self, event, p=None):
        global cfg
        if not p:
            p = event.GetProperty()
        o = self.GetParent().GetItemData(self.GetParent().item)["artefact"]
        msg = ""
        if p.GetName() == "WCName":
            o.WCNumber = model.getWCList().index(p.GetValueAsString())+1
        else:
            msg = storeAttr(o,p)
        if not msg:
            try:
                self.pendingProperties.remove(p)
            except ValueError: pass    
            self.logMsgs.append(f"Operation {o.name}: '{p.GetLabel()}' changed to {p.GetValueAsString()}")
            self.button_OK.Enable()
        else:
            self.pendingProperties.append(p)
            self.msg.SetLabelText(msg)
            self.button_OK.Disable()
    def onOK(self, event):  
        o = self.GetParent().GetItemData(self.GetParent().item)["artefact"]   
        for p in self.pendingProperties:
            self.OnPropGridChange(event, p)
        model.updateOperation(o)
        self.GetParent().SetItemText(self.GetParent().item, o.name)
        for m in self.logMsgs:
            log.append(m)
        p = self.GetParent().GetParent().GetParent().GetParent()
        p.OnRefresh(None,bRefresh=True)
        model.change(True,p.tree.get(id(model),"treeCtrl"),p.tree.get(id(model),"treeItem"))
        self.Close()
    def onCancel(self, event):  
        self.Close()                            

class PrefPTDialog(PrefDialog):
    def __init__(self, *args, **kwds):
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        PrefDialog.__init__(self, *args, **kwds)
        self.pendingProperties = []
        self.logMsgs = []                

    def OnPropGridChange(self, event, p=None):
        global cfg
        if not p:
            p = event.GetProperty()
        t = self.GetParent().GetItemData(self.GetParent().item)["artefact"]
        msg = ""
        msg = storeAttr(t,p)
        if not msg:
            try:
                self.pendingProperties.remove(p)
            except ValueError: pass    
            self.logMsgs.append(f"Product Type {t.name}: '{p.GetLabel()}' changed to {p.GetValueAsString()}")
            self.button_OK.Enable()
        else:
            self.pendingProperties.append(p)
            self.msg.SetLabelText(msg)
            self.button_OK.Disable()            

    def onOK(self, event):  
        t = self.GetParent().GetItemData(self.GetParent().item)["artefact"]
        for p in self.pendingProperties:
            self.OnPropGridChange(event, p)            
        model.updateProdType(t)
        self.GetParent().SetItemText(self.GetParent().item, t.name)
        for m in self.logMsgs:
            log.append(m)
        p = self.GetParent().GetParent().GetParent().GetParent()
        p.OnRefresh(None,bRefresh=True)
        model.change(True,p.tree.get(id(model),"treeCtrl"),p.tree.get(id(model),"treeItem"))
        self.Close()
    def onCancel(self, event):  
        self.Close()                                        


class MyApp(wx.App):
    def __init__(self, redirect=False, filename=None):
        global HOME
        wx.App.__init__(self, redirect, filename)
        HOME = os.getcwd()
        self.frame = MyFrame(None, wx.ID_ANY, title='ConnGirl')
        self.frame.Show()

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        global model, models, modelSelected, options, dpi
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((640, 480))
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(miNew, "New \tCtrl-n", "")
        self.Bind(wx.EVT_MENU, self.FileNew, id=miNew)
        wxglade_tmp_menu.Append(miOpen, "Open \tCtrl-o", "")
        self.Bind(wx.EVT_MENU, self.FileOpen, id=miOpen)
        wxglade_tmp_menu.Append(miSave, "Save \tCtrl-s", "")
        self.Bind(wx.EVT_MENU, self.FileSave, id=miSave)
        wxglade_tmp_menu.Append(miSaveAs, "Save as ... \tCtrl-a", "")
        self.Bind(wx.EVT_MENU, self.FileSaveAs, id=miSaveAs)
        wxglade_tmp_menu_sub = wx.Menu()
        wxglade_tmp_menu_sub.Append(miImportLegacy, "Import Legacy AMS Model", "")
        self.Bind(wx.EVT_MENU, self.FileImportLegacy, id=miImportLegacy)
        wxglade_tmp_menu.Append(wx.ID_ANY, "Import ...", wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(miPref, "Preferences \tCtrl-P", "")
        self.Bind(wx.EVT_MENU, self.HandlePreferences, id=miPref)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(miExit, "Exit \tF3", "")
        self.Bind(wx.EVT_MENU, self.doExit, id=miExit)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Increase Font Size \tCtrl-+", "")
        self.Bind(wx.EVT_MENU, self.IncrFontSize, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Decrease Font Size \tCtrl--", "")
        self.Bind(wx.EVT_MENU, self.DecrFontSize, id=item.GetId())
        self.frame_1_menubar.Append(wxglade_tmp_menu, "View")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(miHelp, "Content \tF1", "")
        self.Bind(wx.EVT_MENU, self.doHelp, id=miHelp)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "License", "")
        self.Bind(wx.EVT_MENU, self.showLicense, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Support", "")
        self.Bind(wx.EVT_MENU, self.onSupport, id=item.GetId())
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(1)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=0)
        self.panel_1 = wxWindow(self.window_1, wx.ID_ANY)
        self.panel_2 = wx.Panel(self.window_1, wx.ID_ANY, style=wx.BORDER_RAISED)

        self.__set_properties()
        self.__do_layout()

        # end wxGlade
        # Setup Tree View
        msg = "Welcome to AMS - The Analytical Model System !"
        self.treeRoot = self.panel_1.tree_ctrl_1.AddRoot(msg)
        msg += " Version: %s" % version
        # Setp Statusbar
        self.frame_1_statusbar.SetStatusText(msg)
        self.frame_1_statusbar.SetFieldsCount(2)
        # Create a progress bar within the status bar
        self.progress_bar = wx.Gauge(self.frame_1_statusbar, -1, style=wx.GA_HORIZONTAL|wx.GA_SMOOTH)
        self.progress_bar.SetValue(0)
        self.progress_bar.Show()
        # Size status bar
        self.sizeStatusBar()
        # Setup toolbar
        TBFLAGS = ( wx.TB_HORIZONTAL
                    | wx.NO_BORDER
                    | wx.TB_FLAT
                    #| wx.TB_TEXT
                    #| wx.TB_HORZ_LAYOUT
                    )
        bmp_r = wx.Bitmap("images"+os.sep+"refresh.bmp", wx.BITMAP_TYPE_BMP)
        self.frame_1_toolbar = self.CreateToolBar( TBFLAGS )
        self.frame_1_toolbar.AddTool(10, "Refresh", bmp_r, wx.NullBitmap, wx.ITEM_NORMAL, "Refresh", "Refresh report", None)
        self.Bind(wx.EVT_TOOL, self.OnRefresh, id=10)
        self.frame_1_toolbar.Realize()
        self.ColsAvailable = None
        # Setup event handlers
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_MOVE, self.OnMove)
        # Size and position frame
        dpi = wx.ScreenDC().GetPPI()[0]*1.0
        try:
            self.SetPosition(wx.Point(int(cfg["gui"]["x"]),int(cfg["gui"]["y"])))
            self.SetSize(int(cfg["gui"]["dx"]),int(cfg["gui"]["dy"]))
        except KeyError: pass
        # Setup Timer
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.doDelayed, self.timer)
        # Set some attributes
        self.view = "All"
        self.report = ""
        self.chart = ""
        self.current_report = ""
        self.col = None
        self.col2 = None
        self.x = "XVal"
        self.DailyOut = 0.0
        self.workcenterSelected = [0,]
        self.addMode = "Add"
        self.modelSelected = -1
        self.prodType = None
        self.tree = guiTree()
        # Init app
        parser = OptionParser(usage)
        parser.add_option("-t", "--prodType", dest = "prodType", default = 0, type="int",
                            help = "Default product type for computations")
        parser.add_option("-o", "--dailyOut", dest = "dailyOut", default = 0, type="int",
                            help = "Daily output used for computations")
        parser.add_option("-p", "--plot", dest = "plot", action="store_true",
                            help = "Generate plot")
        options, args = parser.parse_args()
        log.append("Args: %r" % args)
        log.append("Options: %r" % [(o,getattr(options,o)) for o in dir(options) if "_" not in o])
        for a in args:
            model = loadModel(a,self)
            if not model:
                print("ERROR: Failed to load model %s" % a)            
                sys.exit(1)
            model.dirname = os.path.dirname(a)
            model.version = version
            models.append(model)
            modelSelected = len(models)-1
            self.SetTitle("AMS - %s - Version: %s" % (model.name,version))
            if model:
                self.showModel(model)
                if options.plot:
                    self.timer.Start(100)

    def doDelayed(self, event):
        if options.plot:
            self.Plot()
        self.timer.Stop()

    def OnRefresh(self, event, bRefresh=False):
        if self.view in (model.name, "Model", "Workcenter", "Operations", "Product Types"):
            self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+model.render(cfg["gui"]["font-size"],what=self.view,prodType=self.prodType))                
        elif self.report == "Line and Workcenter Characteristics Table":
            self.ComputeResources(bRefresh=bRefresh)
        elif self.report == "Start Factors":
            self.ComputeSFactors(bRefresh=bRefresh)
        elif self.report == "Capacity Calculation":
            self.ComputeCapacity(bRefresh=bRefresh)            
        elif self.view == "Plot":
            hourglass = wx.BusyCursor()
            CompGraphics(model,NumValues=int(cfg["computations"]["GraphicValues"]))
            self.panel_1.tree_ctrl_1.DoPlotEdit(None,bRefresh=bRefresh)
            del hourglass
        else:
            self.ApplyReport()

    def ApplyReport(self):
        if self.report in ("Line and Workcenter Characteristics Table","Start Factors"):
            if self.report == "Line and Workcenter Characteristics Table":    
                self.ColsAvailable = list(RenderTabOverall(self,model,model.OAR,model.Bottleneck,model.prodTypeSelected,CostIndices,Resources,getOutputItems(cfg),cfg,
                                what=self.view,chart=self.chart,col=self.col))
            elif self.report == "Start Factors":
                self.ColsAvailable = list(RenderWorkLoadTable(self,model,self.prodtype,self.DailyOut,getOutputItems(cfg,"Start Factors"),cfg,self.chart,self.col,what=self.view))                
        elif self.view == "Plot":
            RenderGraphics(self,model,x=self.x,col=self.col,col2=self.col2,workcenterSelected=self.workcenterSelected,
                                      dx=winSize[0],dy=winSize[1],dpi=dpi)

    def removeModel(self,model):
        try:
            self.panel_1.tree_ctrl_1.DeleteChildren(self.tree.get(id(model), "treeItem"))    
            self.panel_1.tree_ctrl_1.Delete(self.tree.get(id(model), "treeItem"))        
        except AttributeError: pass            
        self.tree.delete(id(model))

    def showModel(self, model):
        self.tree.add(id(model), "treeCtrl",self.panel_1.tree_ctrl_1)
        self.tree.add(id(model), "treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.treeRoot, model.name))
        self.panel_1.tree_ctrl_1.DeleteChildren(self.tree.get(id(model), "treeItem"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "treeItem"), {"view": "Model", "model": modelSelected, "artefact": model})
        self.tree.add(id(model), "wc_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "treeItem"), "Workcenter"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "wc_treeItem"), {"view": "Workcenter", "model": modelSelected})
        self.tree.add(id(model), "pt_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "treeItem"), "Product Types"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "pt_treeItem"), {"view": "Product Types", "model": modelSelected})
        self.tree.add(id(model), "c_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "treeItem"), "Computations"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "c_treeItem"), {"view": "", "model": modelSelected})
        self.tree.add(id(model), "sf_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "c_treeItem"), "Start Factors"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "sf_treeItem"), {"view": "All", "model": modelSelected})
        self.tree.add(id(model), "cap_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "c_treeItem"), "Capacity Calculation"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "cap_treeItem"), {"view": "All", "model": modelSelected})        
        self.tree.add(id(model), "ch_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "c_treeItem"), "Line and Workcenter Characteristics Table"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "ch_treeItem"), {"view": "All", "model": modelSelected})
        self.tree.add(id(model), "pl_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "c_treeItem"), "Line and Workcenter Characteristics Plot"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(model), "pl_treeItem"), {"view": "Plot", "report": "Plot", "model": modelSelected})
        self.panel_1.tree_ctrl_1.Expand(self.treeRoot)
        self.showWorkcenter()
        for p in model.prodtypes:    
            self.showProductTypes(p)
        self.panel_1.tree_ctrl_1.Expand(self.tree.get(id(model), "treeItem"))
        self.panel_1.tree_ctrl_1.Expand(self.tree.get(id(model), "wc_treeItem"))
        self.panel_1.tree_ctrl_1.Expand(self.tree.get(id(model), "pt_treeItem"))
        self.panel_1.tree_ctrl_1.Expand(self.tree.get(id(model), "c_treeItem"))
        self.Bind(wx.EVT_TREE_SEL_CHANGED, self.TreeItemSelected, self.panel_1.tree_ctrl_1)
        self.Bind(wx.EVT_TREE_ITEM_ACTIVATED, self.TreeItemActivated, self.panel_1.tree_ctrl_1)
        # EVT_TREE_ITEM_ACTIVATED is needed to enfore displaying model data even computed output is shown (doing dbl-click).
        # This is because of a limitation/bug in wxPython treating right clicks (to invoke context menues) as as EVT_TREE_SEL_CHANGED event.
        # We want to still show computed output when changing a model through context menu 'edit' function.

    def showWorkcenter(self):
        self.panel_1.tree_ctrl_1.DeleteChildren(self.tree.get(id(model), "wc_treeItem"))
        for w in model.workcenter:
            self.tree.add(id(w), "treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "wc_treeItem"), w.name))
            self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(w), "treeItem"), {"view": "Workcenter", "model": modelSelected, "artefact": w})    

    def showProductTypes(self, p):    
        self.tree.add(id(p), "treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(model), "pt_treeItem"), p.name))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(p), "treeItem"), {"view": "Product Types", "model": modelSelected, "artefact": p, "prodtype": p})
        self.tree.add(id(p), "op_treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(p), "treeItem"), "Operations"))
        self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(p), "op_treeItem"), {"view": "Operations", "model": modelSelected, "prodtype": p})
        for o in p.operations:
            self.tree.add(id(o), "treeItem",self.panel_1.tree_ctrl_1.AppendItem(self.tree.get(id(p), "op_treeItem"), o.name))
            self.panel_1.tree_ctrl_1.SetItemData(self.tree.get(id(o), "treeItem"), {"view": "Operations", "model": modelSelected, "artefact": o, "prodtype": p})            

    def DetermineView(self,itemData):
        v = ""
        try:
            v = itemData.get("view")
            if v:
                self.view = v        
        except AttributeError:
            if isinstance(itemData,Model):
                v = "Model"
            elif isinstance(itemData,Workcenter):
                v = "Workcenter"
            elif isinstance(itemData,Operation):
                v = "Operations"
            elif isinstance(itemData,ProdType):
                v = "Product Types"
        r = ""        
        try:
            r = itemData.get("report")
        except AttributeError:
            r = ""
        c = ""        
        try:
            c = itemData.get("chart")
        except AttributeError:
            c = ""
        t = ""        
        try:
            t = itemData.get("prodtype")
        except AttributeError:
            t = ""            
        col = self.col        
        try:
            col = itemData.get("col")
        except AttributeError:
            col = self.col
        if not col:
            col = self.col                    
        return v, r, c, t, col
    
    def TreeItemSelected(self, ev):
        global model,modelSelected
        errors = []
        item = ev.GetItem()
        self.sel = self.panel_1.tree_ctrl_1.GetItemText(item)
        self.itemData = self.panel_1.tree_ctrl_1.GetItemData(item)                
        modelSelected = self.itemData["model"]
        model = models[modelSelected]
        self.SetTitle("AMS - %s" % model.name)
        self.panel_1.tree_ctrl_1.rightClick=False
        self.panel_1.tree_ctrl_1.timer.Start(10)

    def TreeItemActivated(self, ev):
        errors = []
        item = ev.GetItem()
        sel = self.panel_1.tree_ctrl_1.GetItemText(item)
        if sel == "Start Factors":
            self.ComputeSFactors()
        elif sel == "Capacity Calculation":
            self.ComputeCapacity()            
        elif sel == "Line and Workcenter Characteristics Table":
            self.ComputeResources()
        elif sel == "Line and Workcenter Characteristics Plot":
            self.Plot()
        elif sel in (model.name, "Workcenter", "Operations", "Product Types"):
            if sel == model.name:
                sel = "All"
            self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+model.render(cfg["gui"]["font-size"],what=self.view))

    def TreeAddReports(self,what="Line and Workcenter Characteristics Table"):
        if what in ("Line and Workcenter Characteristics Table","Start Factors"):
            if what == "Line and Workcenter Characteristics Table":
                report = "Line and Workcenter Characteristics Table"
                treeitem = self.tree.get(id(model), "ch_treeItem")
                self.panel_1.tree_ctrl_1.DeleteChildren(treeitem)
                item = self.panel_1.tree_ctrl_1.AppendItem(treeitem, "All")
                self.panel_1.tree_ctrl_1.SetItemData(item, {"report": report, "view": "All", "model": modelSelected})                
                item = self.panel_1.tree_ctrl_1.AppendItem(treeitem, "Line")
                self.panel_1.tree_ctrl_1.SetItemData(item, {"report": report, "view": "Line", "model": modelSelected})                
            else:    
                report = "Start Factors"
                treeitem = self.tree.get(id(model), "sf_treeItem")
                self.panel_1.tree_ctrl_1.DeleteChildren(treeitem)
                item = self.panel_1.tree_ctrl_1.AppendItem(treeitem, "All")
                self.panel_1.tree_ctrl_1.SetItemData(item, {"report": report, "view": "All", "model": modelSelected})                                
            for o in getOutputItems(cfg, report):
                leave = self.panel_1.tree_ctrl_1.AppendItem(treeitem, o)
                self.panel_1.tree_ctrl_1.SetItemData(leave, {"report": report, "view": o, "model": modelSelected})                
                s = getOutputItemByName(cfg,o)
                charts = getCharts(cfg,s)
                cnt = 1
                for ch in charts:
                    chart = ch["chart"]
                    leave2 = self.panel_1.tree_ctrl_1.AppendItem(leave, chart.title())
                    cnt += 1
                    self.panel_1.tree_ctrl_1.SetItemData(leave2, {"report": report, "view": o, "chart": chart, "model": modelSelected})                                    
                    s = getOutputItemByName(cfg,o)
                    cols = [ c.strip() for c in cfgGet(cfg, s,"columns").split(",")]
                    for c in cols:
                        item = self.panel_1.tree_ctrl_1.AppendItem(leave2, getLabel(c,model))                
                        self.panel_1.tree_ctrl_1.SetItemData(item, {"report": report, "col": c, "view": o, "chart": chart, "model": modelSelected})                
        else:            
            treeitem = self.tree.get(id(model), "pl_treeItem")
            self.panel_1.tree_ctrl_1.DeleteChildren(treeitem)
            for c in self.ColsAvailable:
                item = self.panel_1.tree_ctrl_1.AppendItem(treeitem, getLabel(c,model))
                self.panel_1.tree_ctrl_1.SetItemData(item, {"report": "Plot", "col": c, "view": "Plot", "model": modelSelected})                                
            return self.ColsAvailable[-1]        

    def HandleTreeItemSelection(self, rightClick):
        if not rightClick:
            self.view, self.report, self.chart, self.prodType, self.col = self.DetermineView(self.itemData)
            try:
                c = self.itemData.get("col")
                if c:
                    self.col = c
            except AttributeError: pass                  
            if not self.report:
                self.report = self.sel
            # print(f"Selection: {self.sel}, Report: {self.report}, View: {self.view}, ProdType: {self.prodType}, Chart: {self.chart}, Col: {self.col}, rightClick: {rightClick}")                             ### ###
            if self.report != self.current_report or modelSelected != self.modelSelected:
                if self.report == "Start Factors":
                    self.ComputeSFactors()
                elif self.report == "Capacity Calculation":
                    self.ComputeCapacity()     
                elif self.report == "Line and Workcenter Characteristics Table":
                    self.ComputeResources()
                elif self.report == "Plot":
                    self.Plot(self.col)
            else:        
                self.ApplyReport()                 
            if self.view in (model.name, "Model", "Workcenter", "Operations", "Product Types"):
                self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+model.render(cfg["gui"]["font-size"],what=self.view,prodType=self.prodType))                
            self.current_report = self.report    
            self.modelSelected = modelSelected


    def Plot(self, col=None):
        errors = []
        checkModel(model,errors)
        if errors:
            for e in errors:
                self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+self.renderErrors(errors))
        else:                
            self.view = "Plot"
            self.ColsAvailable = getPlotsAvailable()
            # self.ColsAvailable = ["Throughput", "Utilization", "LeadTime", "WIP", "QueueLength", "Quantil", "Efficiency", \
            #                     "OutCosts","TimeCosts","ManFacCostsPerPart","ProfitPerPart","ManFacCostsPerTU","ProfitPerTU","Income", \
            #                     "NumOperators","FloorSpace","SpecialArea"]
            if not col:
                col = self.ColsAvailable[1]                       
            hourglass = wx.BusyCursor()
            CompGraphics(model,NumValues=int(cfg["computations"]["GraphicValues"]))        
            RenderGraphics(self,model,x=self.x,col=col,col2=self.col2,workcenterSelected=self.workcenterSelected,
                                        dx=winSize[0],dy=winSize[1],dpi=dpi)
            self.TreeAddReports(self.report)                                    
            del hourglass

    def ComputeSFactors(self,bRefresh=False):
        errors = []
        checkModel(model,errors)
        if errors:
            for e in errors:
                self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+self.renderErrors(errors))
        else:
            dlg = WLDialog(self)
            dlg.button_OK.SetDefault()
            dlg.list_box_ProdType.InsertItems([p.name for p in model.prodtypes],0)
            if model.prodTypeSelected > 0:
                dlg.list_box_ProdType.SetSelection(model.prodTypeSelected-1)
                dlg.button_OK.Enable()
            if options.prodType:
                dlg.list_box_ProdType.SetSelection(options.prodType-1)
                dlg.button_OK.Enable()
            dlg.text_ctrl_DailyOut.SetValue("%d" % self.DailyOut)
            if options.dailyOut:
                dlg.text_ctrl_DailyOut.SetValue("%d" % options.dailyOut)
            if not bRefresh or self.DailyOut == 0.0:
                while True:
                    if dlg.ShowModal() == wx.ID_OK:
                        self.prodtype = dlg.list_box_ProdType.GetSelection()
                        if self.prodtype < 0:
                            dlg.msg.SetLabel("Please select a product type !")
                            continue
                        try:
                            self.DailyOut = float(dlg.text_ctrl_DailyOut.GetValue())
                        except ValueError:
                            dlg.msg.SetLabel("Input needs to be numeric !")
                        else:
                            break
                    else:
                        break
                dlg.Destroy()
            if self.DailyOut > 0.0:    
                ComputeWorkloadTable(model,self.prodtype,self.DailyOut)
                self.ColsAvailable = list(RenderWorkLoadTable(self,model,self.prodtype,self.DailyOut,getOutputItems(cfg,"Start Factors"),cfg,self.chart,self.col,what=self.view))
                self.TreeAddReports(self.report)                                    

    def ComputeCapacity(self,bRefresh=False):
        errors = []
        checkModel(model,errors)
        if errors:
            for e in errors:
                self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+self.renderErrors(errors))
        else:
            bContinue = False
            dlg = CapDialog(self)
            dlg.button_OK.SetDefault()
            if not bRefresh:
                for i, t in enumerate(model.prodtypes):
                    dlg.grid_2.SetCellValue(i,0,t.name)
                    dlg.grid_2.SetCellValue(i,1,"%d" % t.WeekOut)
                    dlg.grid_2.SetReadOnly(i,0,True)
                if dlg.ShowModal() == wx.ID_OK:
                    for i, t in enumerate(model.prodtypes):
                        t.WeekOut = int(dlg.grid_2.GetCellValue(i,1))
                        bContinue = True    
                dlg.Destroy()
            if bContinue:    
                WIP, OAR = ComputeCapTable(model)
                RenderCapTable(self,model,WIP,OAR,cfg["gui"]["font-size"])



    def ComputeResources(self,bRefresh=False):
        if not self.ColsAvailable:
            self.ColsAvailable = ["No charts"]
        errors = []
        checkModel(model,errors)
        if errors:
            for e in errors:
                self.panel_2.wv.LoadURL("file://"+os.getcwd()+SLASH+self.renderErrors(errors))
        else:
            if not model.bComputed:
                initialComputations(model)
            try:
                oar = model.oar
            except AttributeError:
                bRefresh = False
            if not bRefresh or oar > model.MaxOAR:
                dlg = ARDialog(self)
                dlg.button_OK.SetDefault()
                dlg.list_box_ProdType.AppendItems([p.name for p in model.prodtypes if p.percentage > 0.0])
                dlg.list_box_ProdType.SetSelection(model.prodTypeSelected)
                if options.prodType:
                    dlg.list_box_ProdType.SetSelection(options.prodType)
                if options.dailyOut:
                    dlg.label_Max.SetLabel("%.4f" % ConvertAR(model,model.MaxOAR,"IMODE_AR","IMODE_SHIP"))
                    dlg.label_MaxText.SetLabel("Max Overall Shipments")
                    dlg.text_ctrl_DailyOut.SetValue("%d" % options.dailyOut)
                    dlg.radio_btn_SHIP.SetValue(True)
                    dlg.InpMode = "IMODE_SHIP"
                if dlg.ShowModal() == wx.ID_OK:
                    model.oar = ConvertAR(model,float(dlg.text_ctrl_DailyOut.GetValue()),dlg.InpMode,"IMODE_AR")
                    model.prodTypeSelected = dlg.list_box_ProdType.GetSelection()
                    dlg.Destroy()
                else:
                    return    
            hourglass = wx.BusyCursor()
            CompTabOverall(model,model.oar)
            if model.prodTypeSelected > 0:
                ComputeWorkloadTable(model,model.prodTypeSelected-1,ConvertAR(model,model.oar,"IMODE_AR","IMODE_SHIP"))
            model.ResArray = ComputeResource(model)
            model.CostMatrixArray = ComputeCostAll(model)
            self.TreeAddReports()
            self.ColsAvailable = list(RenderTabOverall(self,model,model.oar,model.Bottleneck,model.prodTypeSelected,CostIndices,Resources,getOutputItems(cfg),cfg,
                                        what=self.view,chart=self.chart,col=self.col))   
            del hourglass                         

    def renderErrors(self, errors):
        htmlFile = "%s_err.html" % model.name
        html = "<html><head>%s<title>%s Errors</title></head><body><h1>%s  Errors</h1>" % (CSSStyle,model.name,model.name)
        for e in errors:
            html += "<p>%s</p>" % e
        html += "</body></html>"
        f = open(htmlFile,"w")
        f.write(html)
        f.close()
        return htmlFile

    def OnSize(self, event):
        global winSize
        self.sizeStatusBar()
        size = self.GetSize()
        cfg["gui"]["dx"] = "%s" % size[0]
        cfg["gui"]["dy"] = "%s" % size[1]
        winSize = self.panel_2.GetSize()
        event.Skip()                    # Propagate event ...

    def OnMove(self, event):
        pos = self.GetPosition()
        cfg["gui"]["x"] = "%s" % pos[0]
        cfg["gui"]["y"] = "%s" % pos[1]
        event.Skip()                    # Propagate event ...

    def sizeStatusBar(self):
        width = self.GetSize().GetWidth()
        self.frame_1_statusbar.SetStatusWidths([width*2/3, -1])
        rect = self.frame_1_statusbar.GetFieldRect(1)
        self.progress_bar.SetPosition((rect.x+2, rect.y+2))
        self.progress_bar.SetSize((rect.width-4, rect.height-4))

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("AMS")
        self.frame_1_statusbar.SetStatusWidths([-1])
        
        # statusbar fields
        frame_1_statusbar_fields = ["frame_1_statusbar"]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.window_1.SetMinimumPaneSize(20)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add((0, 0), 0, 0, 0)
        self.panel_2.SetSizer(sizer_2)
        self.window_1.SplitVertically(self.panel_1, self.panel_2)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 1)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        self.window_1.SetSashPosition(200)
        self.window_1.SetSashGravity(0.2)

        # Handle HTML window
        self.htmlFile = "file://"+os.getcwd()+SLASH+"html/ams.html"
        log.append("Loading "+self.htmlFile+" ...")
        self.panel_2.current = self.htmlFile
        self.panel_2.sizer = wx.BoxSizer(wx.VERTICAL)
        self.panel_2.btnSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.panel_2.wv = webview.WebView.New(self.panel_2)
        self.panel_2.sizer.Add(self.panel_2.wv, 1, wx.EXPAND)
        self.panel_2.SetSizer(self.panel_2.sizer)
        self.panel_2.wv.LoadURL(self.panel_2.current)
        self.panel_2.Layout()


    def FileOpen(self, event):  # wxGlade: MyFrame.<event_handler>
        global model, models, modelSelected
        wildcard = "*.mdl"

        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=os.getcwd(),
            defaultFile="",
            wildcard=wildcard,
            style=wx.FD_OPEN | wx.FD_CHANGE_DIR
            )

        paths = ""
        # Show the dialog and retrieve the user response. If it is the OK response,
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            # This returns a Python list of files that were selected.
            paths = dlg.GetPaths()

        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwise!
        dlg.Destroy()
        if paths:
            model = loadModel(paths[0],self)
            model.dirname = os.path.dirname(paths[0])
            model.version = version
            models.append(model)
            modelSelected = len(models)-1            
            self.SetTitle("AMS - %s" % model.name)
            self.showModel(model)    
        event.Skip()

    def doExit(self, event):  # wxGlade: MyFrame.<event_handler>
        msgs = []
        for m in models:
            if m.changed:
                msgs.append(f"Model '{m.name}'' has changed.")
        try:
            if msgs:
                dlg = wx.MessageDialog(self, " ".join(msgs) + " Do you want to exit without saving changes ?",
                        'Model changed ... ?',
                        wx.YES_NO | wx.NO_DEFAULT | wx.ICON_STOP
                        )
                rc = dlg.ShowModal()
                if rc == wx.ID_NO:
                    return
                dlg.Destroy()                
        except AttributeError:
            pass        

        self.Destroy()
        prefs.save(cfg)
        log.appendTimestamp("AMS ended.")
        log.dump()
        event.Skip()

    def HandlePreferences(self, event):  # wxGlade: MyFrame.<event_handler>
        dlg = PrefDialog(self)
        dlg.Show()
        dlg.property_grid_1.AddPage( "Preferences" )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("1 - Computations") )
        dlg.property_grid_1.Append( wxpg.StringProperty("GraphicValues",value="25") )
        dlg.property_grid_1.GetPropertyByName("GraphicValues").SetValue(cfg["computations"]["GraphicValues"])
        event.Skip()

    def IncrFontSize(self, event):  # wxGlade: MyFrame.<event_handler>
        cfg["gui"]["font-size"] = "%d" % (int(cfg["gui"]["font-size"])+1)
        self.OnRefresh(None,bRefresh=True)
        event.Skip()
    def DecrFontSize(self, event):  # wxGlade: MyFrame.<event_handler>
        cfg["gui"]["font-size"] = "%d" % (int(cfg["gui"]["font-size"])-1)
        self.OnRefresh(None,bRefresh=True)
        event.Skip()
    def FileSave(self, event):  # wxGlade: MyFrame.<event_handler>
        treeCtrl = model.treeCtrl
        model.treeCtrl = None
        with open(model.dirname + os.sep + model.name + ".mdl", "wb") as f:
            pickle.dump(model,f)
        model.treeCtrl = treeCtrl
        model.change(False,self.tree.get(id(model),"treeCtrl"),self.tree.get(id(model),"treeItem"))
        self.frame_1_statusbar.SetLabel("Model '%s' saved." % model.name)
        event.Skip()
    def FileImportLegacy(self, event):  # wxGlade: MyFrame.<event_handler>
        global model, models, modelSelected
        wildcard = "*.ams"

        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=os.getcwd(),
            defaultFile="",
            wildcard=wildcard,
            style=wx.FD_OPEN | wx.FD_CHANGE_DIR
            )

        paths = ""
        # Show the dialog and retrieve the user response. If it is the OK response,
        # process the data.
        if dlg.ShowModal() == wx.ID_OK:
            # This returns a Python list of files that were selected.
            paths = dlg.GetPaths()

        # Destroy the dialog. Don't do this until you are done with it!
        # BAD things can happen otherwise!
        dlg.Destroy()
        if paths:
            model = importModelLegacy(paths[0])
            model.dirname = os.path.dirname(paths[0])
            models.append(model)
            modelSelected = len(models)-1            
            self.SetTitle("AMS - %s" % model.name)
            self.showModel(model)
        event.Skip()
    def FileSaveAs(self, event):  # wxGlade: MyFrame.<event_handler>
        with wx.FileDialog(self, "Save AMS Model", wildcard="AMS Model (*.mdl)|*.mdl",
                        style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:

            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return     # the user changed their mind

            # save the current contents in the file
            pathname = fileDialog.GetPath()
            try:
                model.name = pathname.split(os.sep)[-1].replace(".mdl","")
                with open(pathname, "wb") as f:
                    pickle.dump(model,f)
                model.change(False,self.tree.get(id(model),"treeCtrl"),self.tree.get(id(model),"treeItem"))    
                self.frame_1_statusbar.SetLabel("Model '%s' saved." % model.name)
            except IOError:
                self.frame_1_statusbar.SetLabel("Cannot save current data in file '%s'." % pathname)
        event.Skip()
    def FileNew(self, event):  # wxGlade: MyFrame.<event_handler>
        global model, models, modelSelected
        model = Model("New Model","Parts In","Parts Out")
        models.append(model)
        modelSelected = len(models) - 1
        self.SetTitle("AMS - %s" % model.name)
        self.showModel(model)
        event.Skip()
    def doHelp(self, event):  # wxGlade: MyFrame.<event_handler>
        self.htmlFile = "file://"+HOME+SLASH+"html/ams.html"
        log.append("Loading "+self.htmlFile+" ...")
        self.panel_2.current = self.htmlFile
        self.panel_2.wv.LoadURL(self.panel_2.current)
        event.Skip()
    def showLicense(self, event):  # wxGlade: MyFrame.<event_handler>
        self.htmlFile = "file://"+HOME+SLASH+"LICENSE"
        log.append("Loading "+self.htmlFile+" ...")
        self.panel_2.current = self.htmlFile
        self.panel_2.wv.LoadURL(self.panel_2.current)
        event.Skip()
    def onSupport(self, event):  # wxGlade: MyFrame.<event_handler>
        self.htmlFile = "file://"+HOME+SLASH+"html/support.html"
        log.append("Loading "+self.htmlFile+" ...")
        self.panel_2.current = self.htmlFile
        self.panel_2.wv.LoadURL(self.panel_2.current)
        event.Skip()
# end of class MyFrame

class CustomTreeCtrl(CT.CustomTreeCtrl):
    def __init__(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition,
                 size=wx.DefaultSize,
                 style=wx.SUNKEN_BORDER|wx.WANTS_CHARS,
                 agwStyle=CT.TR_HAS_BUTTONS|CT.TR_HAS_VARIABLE_ROW_HEIGHT|CT.TR_MULTIPLE,
                 log=None):

        CT.CustomTreeCtrl.__init__(self, parent, id, pos, size, style, agwStyle)

        self.SetBackgroundColour(wx.WHITE)
        self.parent = parent
        alldata = dir(CT)

        treestyles = []
        events = []
        for data in alldata:
            if data.startswith("TR_"):
                treestyles.append(data)
            elif data.startswith("EVT_"):
                events.append(data)

        self.events = events
        self.styles = treestyles
        self.item = None
        self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.OnContextMenu)
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.handleClick, self.timer)

    def handleClick(self, event):
        self.timer.Stop()
        self.GetParent().GetParent().GetParent().HandleTreeItemSelection(self.rightClick)        

    def OnContextMenu(self, event):
        # Setup right-click menu for tree items
        self.item = event.GetItem()
        self.rightClick=True
        menu = wx.Menu()
        p = self.GetParent().GetParent().GetParent()
        if isinstance(self.GetItemData(self.item).get("artefact"),Model):
            treeMenuItemm1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEdit, treeMenuItemm1)            
        elif isinstance(self.GetItemData(self.item).get("artefact"),Workcenter):
            treeMenuItemw1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEdit, treeMenuItemw1)            
            treeMenuItemw2 = menu.Append(wx.ID_ANY, "Add")
            self.Bind(wx.EVT_MENU, self.OnAdd, treeMenuItemw2)
            treeMenuItemw3 = menu.Append(wx.ID_ANY, "Clone")
            self.Bind(wx.EVT_MENU, self.OnClone, treeMenuItemw3)                                    
            treeMenuItemw4 = menu.Append(wx.ID_ANY, "Delete")
            self.Bind(wx.EVT_MENU, self.OnDelete, treeMenuItemw4)                                    
        elif isinstance(self.GetItemData(self.item).get("artefact"),Operation):
            treeMenuItemo1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEdit, treeMenuItemo1)            
            treeMenuItemo2 = menu.Append(wx.ID_ANY, "Add")
            self.Bind(wx.EVT_MENU, self.OnAdd, treeMenuItemo2)  
            treeMenuItemo3 = menu.Append(wx.ID_ANY, "Clone")
            self.Bind(wx.EVT_MENU, self.OnClone, treeMenuItemo3)                                                
            treeMenuItemo4 = menu.Append(wx.ID_ANY, "Delete")
            self.Bind(wx.EVT_MENU, self.OnDelete, treeMenuItemo4)                                                
            treeMenuItemo5 = menu.Append(wx.ID_ANY, "Edit Process Flow")
            self.Bind(wx.EVT_MENU, self.OnEditPFlow, treeMenuItemo5)            
            treeMenuItemoa = menu.Append(wx.ID_ANY, "Assign...")
            self.Bind(wx.EVT_MENU, self.OnAssignOp, treeMenuItemoa)                                    
        elif isinstance(self.GetItemData(self.item).get("artefact"),ProdType):
            treeMenuItemp1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEdit, treeMenuItemp1)                        
            treeMenuItemp2 = menu.Append(wx.ID_ANY, "Add")
            self.Bind(wx.EVT_MENU, self.OnAdd, treeMenuItemp2)  
            treeMenuItemp3 = menu.Append(wx.ID_ANY, "Clone")
            self.Bind(wx.EVT_MENU, self.OnClone, treeMenuItemp3)                                              
            treeMenuItemp4 = menu.Append(wx.ID_ANY, "Delete")
            self.Bind(wx.EVT_MENU, self.OnDelete, treeMenuItemp4)                                                            
            treeMenuItemp2 = menu.Append(wx.ID_ANY, "Edit Process Flow")
            self.Bind(wx.EVT_MENU, self.OnEditPFlow, treeMenuItemp2)
        elif self.GetItemData(self.item).get("view") == "Plot" and p.view == "Plot":
            if not self.GetItemData(self.item).get("col"):
                submenu = wx.Menu()
                treeMenuItemPlot1 = submenu.Append(wx.ID_ANY, xValues[0])
                treeMenuItemPlot2 = submenu.Append(wx.ID_ANY, xValues[1])
                treeMenuItemPlot3 = submenu.Append(wx.ID_ANY, xValues[2])
                treeMenuItemPlot4 = submenu.Append(wx.ID_ANY, xValues[3])
                treeMenuItemPlotEdit = menu.Append(wx.ID_ANY, "Edit")                
                self.Bind(wx.EVT_MENU, self.DoPlotEdit, treeMenuItemPlotEdit)         
                menu.AppendSeparator()               
                treeMenuItemPlot = menu.AppendSubMenu(submenu, "X Axis")
                menu.AppendSeparator()
                treeMenuItemPlotY = menu.Append(wx.ID_ANY, "Cancel secondary y axis")
                self.Bind(wx.EVT_MENU, self.DoPlotAR, treeMenuItemPlot1)                        
                self.Bind(wx.EVT_MENU, self.DoPlotDR, treeMenuItemPlot2)                        
                self.Bind(wx.EVT_MENU, self.DoPlotSOB, treeMenuItemPlot3)                        
                self.Bind(wx.EVT_MENU, self.DoPlotSHIP, treeMenuItemPlot4)    
                self.Bind(wx.EVT_MENU, self.DoPlotNo2ndY, treeMenuItemPlotY)    
            else:
                p.col2 = self.GetItemData(self.item).get("col")                        
                RenderGraphics(p,model,x=p.x,col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
                    dx=winSize[0],dy=winSize[1],dpi=dpi)            
        elif self.GetItemData(self.item).get("view") == "Workcenter":            
            treeMenuItemWc1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEditWC, treeMenuItemWc1)                                    
            treeMenuItemWc2 = menu.Append(wx.ID_ANY, "Add")
            self.Bind(wx.EVT_MENU, self.OnAdd, treeMenuItemWc2)            
        elif self.GetItemData(self.item).get("view") == "Product Types":            
            treeMenuItemPt1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEditPT, treeMenuItemPt1)                                                
            treeMenuItemPt2 = menu.Append(wx.ID_ANY, "Add")
            self.Bind(wx.EVT_MENU, self.OnAdd, treeMenuItemPt2)            
        elif self.GetItemData(self.item).get("view") == "Operations":            
            treeMenuItemOp1 = menu.Append(wx.ID_ANY, "Edit")
            self.Bind(wx.EVT_MENU, self.OnEditOp, treeMenuItemOp1)            
        selection = self.GetSelections()
        self.PopupMenu(menu)
        menu.Destroy()

    def OnEdit(self, event):
        selection = self.GetSelections()
        if isinstance(self.GetItemData(self.item).get("artefact"),Model):
            self.HandleModelPreferences(event)        
        elif isinstance(self.GetItemData(self.item).get("artefact"),Workcenter):
            self.HandleWCPreferences(event)
        elif isinstance(self.GetItemData(self.item).get("artefact"),Operation):
            self.HandleOpPreferences(event)
        elif isinstance(self.GetItemData(self.item).get("artefact"),ProdType):
            self.HandlePTPreferences(event)

    def OnEditWC(self, event):
        p = self.GetParent().GetParent().GetParent()
        dlg = ArtefactsDialog(p)
        dlg.SetTitle("Edit Workcenter ...")
        dlg.window_2.table = model.makeWorkcenterTable()
        dlg.window_2.CreateGrid(len(model.workcenter), len(dlg.window_2.table))
        dlg.init(model.clone(),"Workcenter")
        dlg.loadArtefacts()
        dlg.Show()

    def OnEditPT(self, event):
        p = self.GetParent().GetParent().GetParent()
        dlg = ArtefactsDialog(p)
        dlg.SetTitle("Edit Product Types ...")
        dlg.window_2.table = model.makeProductTypeTable()
        dlg.window_2.CreateGrid(len(model.prodtypes), len(dlg.window_2.table))
        dlg.model = model.clone()
        dlg.init(model.clone(),"Product Type")
        dlg.loadArtefacts()
        dlg.Show()        

    def OnEditOp(self, event):
        p = self.GetParent().GetParent().GetParent()
        item = self.GetSelection()
        parent = self.GetItemParent(item)
        pt = self.GetItemData(parent).get("artefact")
        dlg = ArtefactsDialog(p)
        dlg.SetTitle("Edit Operations for product type %s..." % pt.name)
        dlg.window_2.table = pt.makeOperationTable()
        dlg.window_2.CreateGrid(len(pt.operations), len(dlg.window_2.table))
        dlg.init(model.clone(),"Operation",pt)
        dlg.loadArtefacts()
        dlg.Show()                
        
    def OnEditPFlow(self, event):
        dlg = PfDialog(self)
        dlg.grid_1.SetRowLabelSize(0)
        a = self.GetItemData(self.item).get("artefact")
        if isinstance(a,ProdType):
            dlg.prodType = a
            dlg.op = -1
        else:    
            # It's an operation !
            dlg.prodType = a.ProdType
            dlg.op = a.ProdType.operations.index(a)
        dlg.SetTitle(f"Process flow for Product Type '{dlg.prodType.name}'")
        for o in dlg.prodType.operations:
            dlg.list_box_1.Append(o.name)
        if dlg.op > -1:
            dlg.list_box_1.Select(dlg.op)
            dlg.updateSuccList()
        dlg.Show()

    def OnAdd(self, event):
        p = self.GetParent().GetParent().GetParent()
        if isinstance(self.GetItemData(self.item).get("artefact"),Workcenter) or self.GetItemData(self.item).get("view") == "Workcenter":
            w = self.GetItemData(self.item).get("artefact")
            w_new = None
            if p.addMode == "Clone":
                w_new = cloneArtefact(w,model.workcenter)
                w_new.operations = []
                w_new.Used = False
            wc = model.addWorkcenter(w,w_new)
            if not self.GetItemData(self.item).get("artefact"):
                ti = self.AppendItem(p.tree.get(id(model), "wc_treeItem"), wc.name)
                self.Expand(p.tree.get(id(model), "wc_treeItem"))
            else:    
                ti = self.InsertItem(p.tree.get(id(model), "wc_treeItem"), self.item, wc.name)
            self.SetItemData(ti, {"view": "Workcenter", "model": modelSelected, "artefact": wc})
            log.append(f"Workcenter {wc.name}: added.")
            p.OnRefresh(None,bRefresh=True)            
        elif isinstance(self.GetItemData(self.item).get("artefact"),Operation):
            o = self.GetItemData(self.item).get("artefact")
            o_new = None
            if p.addMode == "Clone":
                o_new = cloneArtefact(o,o.ProdType.operations)
            op = o.ProdType.addOperation(o,o_new)
            ti = self.InsertItem(self.GetItemParent(p.tree.get(id(o), "treeItem")), self.item, op.name)
            self.SetItemData(ti, {"view": "Operations", "model": modelSelected, "artefact": op})
            log.append(f"Operation {op.name}: added.")
            p.OnRefresh(None,bRefresh=True)            
        elif isinstance(self.GetItemData(self.item).get("artefact"),ProdType)  or self.GetItemData(self.item).get("view") == "Product Types":
            t = self.GetItemData(self.item).get("artefact")
            if p.addMode == "Clone":
                t_new = cloneArtefact(t,model.prodtypes)    
                # Split percentage fifty-fifty
                t_new.percentage = t.percentage / 2.0        
                t.percentage = t.percentage / 2.0
                # Clone operations
                t_new.operations = []
                for i, o in enumerate(t.operations):       
                    t_new.operations.append(cloneArtefact(o,name=o.name))
                # Clone transitions    
                t_new.transitions = []    
                for i, tr in enumerate(t.transitions):       
                    t_new.transitions.append(cloneArtefact(tr,name="->"))                
                pt = model.addProdType(t,t_new)
            else:
                pt = model.addProdType(t)    
                if len(model.prodtypes) == 1:
                    pt.percentage = 1.0
            if not self.GetItemData(self.item).get("artefact"):
                p.tree.add(id(pt), "treeItem",self.AppendItem(p.tree.get(id(model), "pt_treeItem"), pt.name))
                self.Expand(p.tree.get(id(model), "pt_treeItem"))
            else:                
                p.tree.add(id(pt), "treeItem",self.InsertItem(self.GetItemParent(p.tree.get(id(t), "treeItem")), self.item, pt.name))
            self.SetItemData(p.tree.get(id(pt), "treeItem"), {"view": "Product Types", "model": modelSelected, "artefact": pt})
            p.tree.add(id(pt), "op_treeItem",self.AppendItem(p.tree.get(id(pt), "treeItem"), "Operations"))
            self.SetItemData(p.tree.get(id(pt), "op_treeItem"), {"view": "Operations", "model": modelSelected})
            for o in pt.operations:
                p.tree.add(id(o), "treeItem",self.AppendItem(p.tree.get(id(pt), "op_treeItem"), o.name))
                self.SetItemData(p.tree.get(id(o), "treeItem"), {"view": "Operations", "model": modelSelected, "artefact": o})
            self.Expand(p.tree.get(id(pt), "op_treeItem"))                
            log.append(f"Product Type {pt.name}: added.")
            p.prodtype = pt
        model.bComputed = False
        model.change(True,p.tree.get(id(model),"treeCtrl"),p.tree.get(id(model),"treeItem"))
        p.OnRefresh(None,bRefresh=True)            
        p.addMode = "Add"    

    def OnClone(self, event):
        p = self.GetParent().GetParent().GetParent()
        p.addMode = "Clone"
        self.OnAdd(event)

    def OnAssignOp(self, event):
        self.AssignOp(model)

    def AssignOp(self, model, op=None):
        selection = self.GetSelections()
        p = self.GetParent().GetParent().GetParent()
        dlg = OpAssignDialog(self)
        dlg.model = model
        dlg.changes = []
        dlg.op = op
        if op:
            o = op
            dlg.msg.SetLabel(f"Please assign operation {op.name} to a different workcenter.")
        else:    
            o = self.GetItemData(self.item).get("artefact")
        dlg.button_OK.SetDefault()
        dlg.combo_box_pt.Clear()
        dlg.list_box_wc.Clear()
        for i, w in enumerate(model.workcenter):        
            dlg.list_box_wc.Append(w.name)        
        for i, t in enumerate(model.prodtypes):        
            dlg.combo_box_pt.Append(t.name)
        dlg.combo_box_pt.Select(model.prodtypes.index(o.ProdType))            
        dlg.prodTypeSelected(None)
        dlg.list_box_op.Select(o.ProdType.operations.index(o))            
        dlg.opSelected(None)
        if dlg.ShowModal() == wx.ID_OK:
            model.bComputed = False
            model.findUsedWorkcenter()
            p.OnRefresh(None,bRefresh=True)
        else:
            for c in reversed(dlg.changes):
                c["operation"].WCNumber = c["oldWorkcenter"]
            return False    
        dlg.Destroy()
        return True


    def OnDelete(self, event):
        selection = self.GetSelections()
        p = self.GetParent().GetParent().GetParent()
        if isinstance(self.GetItemData(self.item).get("artefact"),Workcenter):
            w = self.GetItemData(self.item).get("artefact")
            self.OnDeleteWc(w,p,model)
        elif isinstance(self.GetItemData(self.item).get("artefact"),Operation):
            o = self.GetItemData(self.item).get("artefact")
            self.OnDeleteOp(o,p)            
        elif isinstance(self.GetItemData(self.item).get("artefact"),ProdType):
            t = self.GetItemData(self.item).get("artefact")
            self.OnDeletePt(t,p)

    def OnDeleteWc(self, w, p, model):
        bDone = False
        while not bDone:
            ops = model.findOperations(w)
            if ops:
                if not self.AssignOp(model,op=ops[0]):
                    break
            else:
                bDone = True  
        if bDone:          
            model.deleteWorkcenter(w)
            log.append(f"Workcenter {w.name} deleted.")
            p.OnRefresh(None,bRefresh=True)
        return bDone    

    def OnDeleteOp(self, o, p):
        o.ProdType.deleteOperation(o)
        model.findUsedWorkcenter()
        try:
            self.Delete(self.item)
        except AttributeError: pass    
        log.append(f"Operation {o.name} of product type {o.ProdType.name} deleted.")
        p.OnRefresh(None,bRefresh=True)                

    def OnDeletePt(self, t, p):
        dlg = wx.MessageDialog(self, f"Do you want to delete product type {t.name} with all {len(t.operations)} operations ?",
                'Delete product type ... ?',
                wx.YES_NO | wx.NO_DEFAULT | wx.ICON_STOP
                )
        rc = dlg.ShowModal()
        if rc == wx.ID_YES:        
            model.deleteProdType(t)
            model.findUsedWorkcenter()
            try:
                self.Delete(self.item)
            except AttributeError: pass    
            log.append(f"Product type {t.name} deleted.")
            p.OnRefresh(None,bRefresh=True)  
        dlg.Destroy()                                                  
        
    def HandleModelPreferences(self, event):
        dlg = PrefModelDialog(self)
        dlg.Show()
        title = "Model Preferences"
        dlg.SetTitle(title)
        m = self.GetItemData(self.item).get("artefact")
        dlg.property_grid_1.AddPage( "^Model Preferences" )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("1 - Basic Characteristic") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Name",value=f"{m.name}",name="name") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Parts going in",value=f"{m.inParts}",name="inParts") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Parts going out",value=f"{m.outParts}",name="outParts") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Hours per shift",value=f"{m.hoursPerShift}",name="hoursPerShift") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Hours per shift",value=f"{m.hoursPerDay}",name="hoursPerDay") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Days per week",value=f"{m.daysPerWeek}",name="daysPerWeek") )
        dlg.property_grid_1.Append( wxpg.EnumProperty("Unit of Time","unitOfTime",unitOfTime,[0,1,2],m.unitOfTime) )
        dlg.property_grid_1.Append( wxpg.StringProperty("Currency",value=f"{m.currency}",name="currency") )
        dlg.property_grid_1.Append( wxpg.StringProperty("CoV of Arrival",value=f"{m.CVSource}",name="CVSource") )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("2 - Cost") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Floor Space Cost [%s/(sqm*year)]" % m.currency,value=f"{m.FloorSpace}",name="FloorSpace") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Special Area Cost [%s/(sqm*year)]" % m.currency,value=f"{m.SpecialArea}",name="SpecialArea") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Headcount [%s/hour]" % m.currency,value=f"{m.HeadCount}",name="HeadCount") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Overhead",value=f"{m.Overhead}",name="Overhead") )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("3 - Resources") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Operator Availability",value=f"{m.OperatorAV}",name="OperatorAV") )
        event.Skip()


    def HandleWCPreferences(self, event, wc=None, msg=""):
        dlg = PrefWCDialog(self)
        dlg.Show()
        if msg:
            dlg.msg.SetLabelText(msg)
        title = "Workcenter Preferences"
        dlg.SetTitle(title)
        if wc:
            w = wc
        else:
            w = self.GetItemData(self.item).get("artefact")    
        dlg.property_grid_1.AddPage( "Workcenter Preferences" )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("1 - Basic Characteristic") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Name",value=f"{w.name}",name="name") )
        dict = getDataDictItems("Workcenter",model,"Basic")
        for d in dict:
            dlg.property_grid_1.Append( wxpg.StringProperty(dict[d]["Label"],value=f"{getattr(w,d)}",name=d) )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("2 - Cost") )
        dict = getDataDictItems("Workcenter",model,"Cost")
        for d in dict:
            dlg.property_grid_1.Append( wxpg.StringProperty(dict[d]["Label"],value=f"{getattr(w,d)}",name=d) )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("3 - Resources") )
        dict = getDataDictItems("Workcenter",model,"Resource")
        for d in dict:
            if d == "BufferIsFloorSpace":
                dlg.property_grid_1.Append( wxpg.BoolProperty(dict[d]["Label"],value=int(f"{getattr(w,d)}"),name=d) )
            else:
                dlg.property_grid_1.Append( wxpg.StringProperty(dict[d]["Label"],value=f"{getattr(w,d)}",name=d) )

        if event:
            event.Skip()

    def HandleOpPreferences(self, event):
        dlg = PrefOpDialog(self)
        dlg.Show()
        o = self.GetItemData(self.item).get("artefact")
        title = f"Product Type '{o.ProdType.name}'' Operation Preferences"
        dlg.SetTitle(title)
        dlg.property_grid_1.AddPage(title)
        dlg.property_grid_1.Append( wxpg.PropertyCategory("1 - Basic Characteristic") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Name",value=f"{o.name}",name="name") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Cycle Time [%s]" % unitOfTime[model.unitOfTime],value=f"{o.CT}",name="CT") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Split/Join Factor",value=f"{o.SJFactor}",name="SJFactor") )
        dlg.property_grid_1.Append( wxpg.EditEnumProperty("Workcenter","WCName",
                                         model.getWCList(),
                                         range(len(model.workcenter)),
                                         o.getWCName()) )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("2 - Cost") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Material [%s/part]" % model.currency,value=f"{o.Cost_Mat}",name="Cost_Mat"))
        dlg.property_grid_1.Append( wxpg.StringProperty("Scrapping [%s/part lost]" % model.currency,value=f"{o.Cost_Scrap}",name="Cost_Scrap"))
        dlg.property_grid_1.Append( wxpg.PropertyCategory("3 - Resources") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Handling Time [%s]" % unitOfTime[model.unitOfTime],value=f"{o.Time_Handling}",name="Time_Handling"))
        dlg.property_grid_1.Append( wxpg.StringProperty("Inspection Time [%s]" % unitOfTime[model.unitOfTime],value=f"{o.Time_Inspection}",name="Time_Inspection"))
        event.Skip()

    def HandlePTPreferences(self, event):
        dlg = PrefPTDialog(self)
        dlg.Show()
        p = self.GetItemData(self.item).get("artefact")
        title = f"Product Type Preferences"
        dlg.SetTitle(title)
        dlg.property_grid_1.AddPage(title)
        dlg.property_grid_1.Append( wxpg.PropertyCategory("1 - Basic Characteristic") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Parts In",value=f"{p.inParts}",name="inParts") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Parts Out",value=f"{p.outParts}",name="outParts") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Description",value=f"{p.description}",name="description") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Percentage",value=f"{p.percentage*100.0}",name="percentage") )
        dlg.property_grid_1.Append( wxpg.PropertyCategory("2 - Cost") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Inventory [%s/%s]" % (model.currency,unitOfTime[model.unitOfTime]),value=f"{p.Cost_Inventory}",name="Cost_Inventory"))
        dlg.property_grid_1.Append( wxpg.PropertyCategory("3 - Resources") )
        dlg.property_grid_1.Append( wxpg.StringProperty("Space [sqm]",value=f"{p.Res_Space}",name="Res_Space"))
        dlg.property_grid_1.Append( wxpg.StringProperty("Income [%s/part]" % (model.currency,),value=f"{p.Income}",name="Income"))
        event.Skip()

    def DoPlotEdit(self, event, bRefresh=False):
        p = self.GetParent().GetParent().GetParent()
        if not bRefresh:
            dlg = PlotPropertiesDialog(self)
            dlg.list_box_x.Clear()
            dlg.list_box_y.Clear()
            dlg.list_box_y2.Clear()
            dlg.check_list_box_1.Clear()
            for i in range(4):
                dlg.list_box_x.Append(xValues[i])                        
            dlg.list_box_x.SetSelection(xValueAttributes.index(p.x))                
            dlg.list_box_y2.Append("None")    
            for c in p.ColsAvailable:    
                dlg.list_box_y.Append(getLabel(c,model))            
                dlg.list_box_y2.Append(getLabel(c,model))
            if p.col:    
                dlg.list_box_y.SetSelection(p.ColsAvailable.index(p.col))            
            else:    
                dlg.list_box_y.SetSelection(1)            
            if p.col2:    
                dlg.list_box_y2.SetSelection(p.ColsAvailable.index(p.col2)+1)            
            else:    
                dlg.list_box_y2.SetSelection(0)            
            dlg.check_list_box_1.Append("Line")   
            for w in model.workcenter:
                if not w.Used:
                    continue
                dlg.check_list_box_1.Append(w.name)                
            dlg.cnt = len(model.workcenter)+1    
            dlg.check_list_box_1.SetCheckedItems(p.workcenterSelected)            
            dlg.doWorkcenterSelected(None)
            if dlg.ShowModal() == wx.ID_OK:       
                p.x = xValueAttributes[dlg.list_box_x.GetSelection()]
                sel1 = dlg.list_box_y.GetSelection()
                p.col =  p.ColsAvailable[sel1]
                sel2 = dlg.list_box_y2.GetSelection()
                if sel2 == 0:
                    p.col2 =  None
                else:    
                    p.col2 =  p.ColsAvailable[sel2-1]
                p.workcenterSelected = dlg.check_list_box_1.GetCheckedItems()     
                if not p.workcenterSelected:
                    p.workcenterSelected = (0,)
                if len(p.workcenterSelected) > 1:
                    p.col2 = None
            else:
                return        
        RenderGraphics(p,model,x=p.x,col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
            dx=winSize[0],dy=winSize[1],dpi=dpi)

    def DoPlotAR(self, event):
        p = self.GetParent().GetParent().GetParent()
        p.x = "AR"
        RenderGraphics(p,model,col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
            dx=winSize[0],dy=winSize[1],dpi=dpi)

    def DoPlotDR(self, event):
        p = self.GetParent().GetParent().GetParent()
        p.x = "DR"
        RenderGraphics(p,model,x="DR",col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
            dx=winSize[0],dy=winSize[1],dpi=dpi)        

    def DoPlotSOB(self, event):
        p = self.GetParent().GetParent().GetParent()
        p.x = "SOB"
        RenderGraphics(p,model,x="SOB",col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
            dx=winSize[0],dy=winSize[1],dpi=dpi)                

    def DoPlotSHIP(self, event):
        p = self.GetParent().GetParent().GetParent()
        p.x = "SHIP"
        RenderGraphics(p,model,x="SHIP",col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
            dx=winSize[0],dy=winSize[1],dpi=dpi)                

    def DoPlotNo2ndY(self, event):
        p = self.GetParent().GetParent().GetParent()
        p.col2 = None
        RenderGraphics(p,model,x=p.x,col=p.col,col2=p.col2,workcenterSelected=p.workcenterSelected,
            dx=winSize[0],dy=winSize[1],dpi=dpi)                        

def loadModel(f,frame):
    model = None
    try:
        with open(f, "rb") as f:
            model = pickle.load(f)
    except FileNotFoundError:
        print("File not found: %s." % f)            
    else:    
        model.change(False)
        frame.frame_1_statusbar.SetLabel("Model '%s' loaded." % model.name)
    return model    


if __name__ == '__main__':
    global log
    usage = '''
    ams.py model.ams
    '''
    log = AppLog()
    log.appendTimestamp("AMS started.")
    prefs = Preferences()
    cfg = prefs.load()
    app = MyApp()
    log.setFrame(app.frame)
    app.MainLoop()